{"ast":null,"code":"import { format } from 'date-fns';\nimport { pt } from 'date-fns/locale';\n\n/**\n * Calcula o tempo detalhado entre duas datas\n * @param {Date} targetDate - Data alvo\n * @param {Date} currentDate - Data atual (opcional)\n * @returns {Object} Objeto com anos, meses, dias, horas, minutos, segundos e se é passado\n */\nexport const calculateDetailedTime = (targetDate, currentDate = new Date()) => {\n  const target = new Date(targetDate);\n  const isPast = currentDate > target;\n\n  // Calcular a diferença em milissegundos\n  let diffMs = Math.abs(currentDate - target);\n\n  // Converter para unidades de tempo\n  const seconds = Math.floor(diffMs / 1000 % 60);\n  const minutes = Math.floor(diffMs / (1000 * 60) % 60);\n  const hours = Math.floor(diffMs / (1000 * 60 * 60) % 24);\n  const days = Math.floor(diffMs / (1000 * 60 * 60 * 24) % 30);\n  const months = Math.floor(diffMs / (1000 * 60 * 60 * 24 * 30) % 12);\n  const years = Math.floor(diffMs / (1000 * 60 * 60 * 24 * 365));\n\n  // Formatar a data\n  const formattedDate = format(target, \"dd 'de' MMMM 'de' yyyy 'às' HH:mm\", {\n    locale: pt\n  });\n\n  // Criar string formatada para exibição\n  let formattedDistance = '';\n  if (years > 0) formattedDistance += `${years} ${years === 1 ? 'ano' : 'anos'}, `;\n  if (months > 0) formattedDistance += `${months} ${months === 1 ? 'mês' : 'meses'}, `;\n  if (days > 0) formattedDistance += `${days} ${days === 1 ? 'dia' : 'dias'}, `;\n  if (hours > 0) formattedDistance += `${hours} ${hours === 1 ? 'hora' : 'horas'}, `;\n  if (minutes > 0) formattedDistance += `${minutes} ${minutes === 1 ? 'minuto' : 'minutos'}, `;\n  formattedDistance += `${seconds} ${seconds === 1 ? 'segundo' : 'segundos'}`;\n  return {\n    years,\n    months,\n    days,\n    hours,\n    minutes,\n    seconds,\n    past: isPast,\n    formattedDistance,\n    formattedDate\n  };\n};","map":{"version":3,"names":["format","pt","calculateDetailedTime","targetDate","currentDate","Date","target","isPast","diffMs","Math","abs","seconds","floor","minutes","hours","days","months","years","formattedDate","locale","formattedDistance","past"],"sources":["C:/Users/admin/Documents/trae_projects/contadordias/frontend/src/utils/timeUtils.js"],"sourcesContent":["import { format } from 'date-fns';\nimport { pt } from 'date-fns/locale';\n\n/**\n * Calcula o tempo detalhado entre duas datas\n * @param {Date} targetDate - Data alvo\n * @param {Date} currentDate - Data atual (opcional)\n * @returns {Object} Objeto com anos, meses, dias, horas, minutos, segundos e se é passado\n */\nexport const calculateDetailedTime = (targetDate, currentDate = new Date()) => {\n  const target = new Date(targetDate);\n  const isPast = currentDate > target;\n  \n  // Calcular a diferença em milissegundos\n  let diffMs = Math.abs(currentDate - target);\n  \n  // Converter para unidades de tempo\n  const seconds = Math.floor((diffMs / 1000) % 60);\n  const minutes = Math.floor((diffMs / (1000 * 60)) % 60);\n  const hours = Math.floor((diffMs / (1000 * 60 * 60)) % 24);\n  const days = Math.floor((diffMs / (1000 * 60 * 60 * 24)) % 30);\n  const months = Math.floor((diffMs / (1000 * 60 * 60 * 24 * 30)) % 12);\n  const years = Math.floor(diffMs / (1000 * 60 * 60 * 24 * 365));\n  \n  // Formatar a data\n  const formattedDate = format(target, \"dd 'de' MMMM 'de' yyyy 'às' HH:mm\", { locale: pt });\n  \n  // Criar string formatada para exibição\n  let formattedDistance = '';\n  if (years > 0) formattedDistance += `${years} ${years === 1 ? 'ano' : 'anos'}, `;\n  if (months > 0) formattedDistance += `${months} ${months === 1 ? 'mês' : 'meses'}, `;\n  if (days > 0) formattedDistance += `${days} ${days === 1 ? 'dia' : 'dias'}, `;\n  if (hours > 0) formattedDistance += `${hours} ${hours === 1 ? 'hora' : 'horas'}, `;\n  if (minutes > 0) formattedDistance += `${minutes} ${minutes === 1 ? 'minuto' : 'minutos'}, `;\n  formattedDistance += `${seconds} ${seconds === 1 ? 'segundo' : 'segundos'}`;\n  \n  return {\n    years,\n    months,\n    days,\n    hours,\n    minutes,\n    seconds,\n    past: isPast,\n    formattedDistance,\n    formattedDate\n  };\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,SAASC,EAAE,QAAQ,iBAAiB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,UAAU,EAAEC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,KAAK;EAC7E,MAAMC,MAAM,GAAG,IAAID,IAAI,CAACF,UAAU,CAAC;EACnC,MAAMI,MAAM,GAAGH,WAAW,GAAGE,MAAM;;EAEnC;EACA,IAAIE,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACN,WAAW,GAAGE,MAAM,CAAC;;EAE3C;EACA,MAAMK,OAAO,GAAGF,IAAI,CAACG,KAAK,CAAEJ,MAAM,GAAG,IAAI,GAAI,EAAE,CAAC;EAChD,MAAMK,OAAO,GAAGJ,IAAI,CAACG,KAAK,CAAEJ,MAAM,IAAI,IAAI,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;EACvD,MAAMM,KAAK,GAAGL,IAAI,CAACG,KAAK,CAAEJ,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;EAC1D,MAAMO,IAAI,GAAGN,IAAI,CAACG,KAAK,CAAEJ,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;EAC9D,MAAMQ,MAAM,GAAGP,IAAI,CAACG,KAAK,CAAEJ,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;EACrE,MAAMS,KAAK,GAAGR,IAAI,CAACG,KAAK,CAACJ,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;;EAE9D;EACA,MAAMU,aAAa,GAAGlB,MAAM,CAACM,MAAM,EAAE,mCAAmC,EAAE;IAAEa,MAAM,EAAElB;EAAG,CAAC,CAAC;;EAEzF;EACA,IAAImB,iBAAiB,GAAG,EAAE;EAC1B,IAAIH,KAAK,GAAG,CAAC,EAAEG,iBAAiB,IAAI,GAAGH,KAAK,IAAIA,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG,MAAM,IAAI;EAChF,IAAID,MAAM,GAAG,CAAC,EAAEI,iBAAiB,IAAI,GAAGJ,MAAM,IAAIA,MAAM,KAAK,CAAC,GAAG,KAAK,GAAG,OAAO,IAAI;EACpF,IAAID,IAAI,GAAG,CAAC,EAAEK,iBAAiB,IAAI,GAAGL,IAAI,IAAIA,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,MAAM,IAAI;EAC7E,IAAID,KAAK,GAAG,CAAC,EAAEM,iBAAiB,IAAI,GAAGN,KAAK,IAAIA,KAAK,KAAK,CAAC,GAAG,MAAM,GAAG,OAAO,IAAI;EAClF,IAAID,OAAO,GAAG,CAAC,EAAEO,iBAAiB,IAAI,GAAGP,OAAO,IAAIA,OAAO,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAS,IAAI;EAC5FO,iBAAiB,IAAI,GAAGT,OAAO,IAAIA,OAAO,KAAK,CAAC,GAAG,SAAS,GAAG,UAAU,EAAE;EAE3E,OAAO;IACLM,KAAK;IACLD,MAAM;IACND,IAAI;IACJD,KAAK;IACLD,OAAO;IACPF,OAAO;IACPU,IAAI,EAAEd,MAAM;IACZa,iBAAiB;IACjBF;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}